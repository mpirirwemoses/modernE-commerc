// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses    Address[]
  orders      Order[]
  reviews     Review[]
  wishlist    WishlistItem[]
  cartItems   CartItem[]

  @@map("users")
}

enum UserRole {
  ADMIN
  CUSTOMER
  MODERATOR
}

// Address Management
model Address {
  id          String  @id @default(cuid())
  userId      String
  type        AddressType
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders Order[] @relation("BillingAddress")

  @@map("addresses")
}

enum AddressType {
  BILLING
  SHIPPING
  BOTH
}

// Category Management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image1      String?
  image2      String?
  image3      String?
  image4      String?
  isActive    Boolean  @default(true)
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Product Management
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String   @db.Text
  shortDescription String?
  sku         String   @unique
  categoryId  String
  brand       String?
  oldPrice    Decimal  @db.Decimal(10, 2)
  newPrice    Decimal  @db.Decimal(10, 2)
  costPrice   Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  minStock    Int      @default(5)
  weight      Float?
  dimensions  String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  isOnSale    Boolean  @default(false)
  saleEndDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category     @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  videos      ProductVideo[]
  variants    ProductVariant[]
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

// Product Images
model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Product Videos
model ProductVideo {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_videos")
}

// Product Variants (Size, Color, etc.)
model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String   // e.g., "Size", "Color"
  value     String   // e.g., "XL", "Red"
  sku       String   @unique
  stock     Int      @default(0)
  price     Decimal? @db.Decimal(10, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  variantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Order Management
model Order {
  id            String        @id @default(cuid())
  userId        String
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @db.Decimal(10, 2) @default(0)
  shipping      Decimal       @db.Decimal(10, 2) @default(0)
  discount      Decimal       @db.Decimal(10, 2) @default(0)
  total         Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  shippingAddressId String?
  billingAddressId String?
  notes         String?
  trackingNumber String?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user            User         @relation(fields: [userId], references: [id])
  shippingAddress Address?     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  reviews         Review[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// Order Items
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  variantId String?
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Payment Management
model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  gateway       PaymentGateway
  gatewayData   Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  MTN_MONEY
  AIRTEL_MONEY
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentGateway {
  STRIPE
  PAYPAL
  MTN_MOBILE_MONEY
  AIRTEL_MONEY
  BANK
  CASH
}

// Reviews and Ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  orderId   String?
  rating    Int      @db.TinyInt
  title     String?
  comment   String?  @db.Text
  isVerified Boolean @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])

  @@unique([userId, productId, orderId])
  @@map("reviews")
}

// Coupons and Discounts
model Coupon {
  id            String        @id @default(cuid())
  code          String        @unique
  type          CouponType
  value         Decimal       @db.Decimal(10, 2)
  minAmount     Decimal?      @db.Decimal(10, 2)
  maxDiscount   Decimal?      @db.Decimal(10, 2)
  usageLimit    Int?
  usedCount     Int           @default(0)
  isActive      Boolean       @default(true)
  startsAt      DateTime?
  expiresAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("coupons")
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// Settings and Configuration
model Setting {
  id        String @id @default(cuid())
  key       String @unique
  value     String @db.Text
  type      String @default("string") // string, number, boolean, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}
